[{"C:\\projects\\todolist-16\\src\\index.tsx":"1","C:\\projects\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts":"2","C:\\projects\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"3","C:\\projects\\todolist-16\\src\\api\\todolists-api.ts":"4","C:\\projects\\todolist-16\\src\\app\\App.tsx":"5","C:\\projects\\todolist-16\\src\\components\\Error404\\Error404.tsx":"6","C:\\projects\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts":"7","C:\\projects\\todolist-16\\src\\features\\Login\\Login.tsx":"8","C:\\projects\\todolist-16\\src\\app\\store.ts":"9","C:\\projects\\todolist-16\\src\\utils\\error-utils.ts":"10","C:\\projects\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx":"11","C:\\projects\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx":"12","C:\\projects\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"13","C:\\projects\\todolist-16\\src\\features\\Login\\auth-reducer.ts":"14","C:\\projects\\todolist-16\\src\\reportWebVitals.ts":"15","C:\\projects\\todolist-16\\src\\app\\app-reducer.ts":"16","C:\\projects\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx":"17"},{"size":752,"mtime":1612602518523,"results":"18","hashOfConfig":"19"},{"size":4585,"mtime":1597327450000,"results":"20","hashOfConfig":"19"},{"size":1773,"mtime":1596295538000,"results":"21","hashOfConfig":"19"},{"size":2986,"mtime":1613808956849,"results":"22","hashOfConfig":"19"},{"size":2626,"mtime":1613812500547,"results":"23","hashOfConfig":"19"},{"size":528,"mtime":1612603342241,"results":"24","hashOfConfig":"19"},{"size":5633,"mtime":1596722126000,"results":"25","hashOfConfig":"19"},{"size":4083,"mtime":1613807233812,"results":"26","hashOfConfig":"19"},{"size":1183,"mtime":1613133833434,"results":"27","hashOfConfig":"19"},{"size":811,"mtime":1596719330000,"results":"28","hashOfConfig":"19"},{"size":1595,"mtime":1596715562000,"results":"29","hashOfConfig":"19"},{"size":952,"mtime":1594154724000,"results":"30","hashOfConfig":"19"},{"size":4193,"mtime":1596715250000,"results":"31","hashOfConfig":"19"},{"size":1976,"mtime":1613812627810,"results":"32","hashOfConfig":"19"},{"size":425,"mtime":1607869388000,"results":"33","hashOfConfig":"19"},{"size":2070,"mtime":1613806494295,"results":"34","hashOfConfig":"19"},{"size":4053,"mtime":1613806182524,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"10ts7x1",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\projects\\todolist-16\\src\\index.tsx",[],["74","75"],"C:\\projects\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts",["76"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","C:\\projects\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["77","78","79"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\projects\\todolist-16\\src\\api\\todolists-api.ts",[],"C:\\projects\\todolist-16\\src\\app\\App.tsx",["80"],"C:\\projects\\todolist-16\\src\\components\\Error404\\Error404.tsx",[],"C:\\projects\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts",["81","82"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","C:\\projects\\todolist-16\\src\\features\\Login\\Login.tsx",["83"],"C:\\projects\\todolist-16\\src\\app\\store.ts",[],"C:\\projects\\todolist-16\\src\\utils\\error-utils.ts",[],"C:\\projects\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx",["84","85","86"],"C:\\projects\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\projects\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["87","88","89","90","91","92"],"C:\\projects\\todolist-16\\src\\features\\Login\\auth-reducer.ts",[],"C:\\projects\\todolist-16\\src\\reportWebVitals.ts",[],"C:\\projects\\todolist-16\\src\\app\\app-reducer.ts",[],"C:\\projects\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx",["93","94","95","96","97","98","99","100"],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":10,"column":45,"nodeType":"107","messageId":"108","endLine":10,"endColumn":47},{"ruleId":"109","severity":1,"message":"110","line":15,"column":97,"nodeType":"111","endLine":15,"endColumn":130,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"110","line":20,"column":8,"nodeType":"111","endLine":20,"endColumn":41,"suggestions":"113"},{"ruleId":"109","severity":1,"message":"110","line":24,"column":8,"nodeType":"111","endLine":24,"endColumn":41,"suggestions":"114"},{"ruleId":"109","severity":1,"message":"115","line":37,"column":8,"nodeType":"111","endLine":37,"endColumn":10,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":5,"column":9,"nodeType":"119","messageId":"120","endLine":5,"endColumn":22},{"ruleId":"105","severity":1,"message":"106","line":13,"column":94,"nodeType":"107","messageId":"108","endLine":13,"endColumn":96},{"ruleId":"121","severity":1,"message":"122","line":57,"column":32,"nodeType":"123","endLine":57,"endColumn":49},{"ruleId":"117","severity":1,"message":"124","line":2,"column":9,"nodeType":"119","messageId":"120","endLine":2,"endColumn":12},{"ruleId":"117","severity":1,"message":"125","line":2,"column":14,"nodeType":"119","messageId":"120","endLine":2,"endColumn":20},{"ruleId":"117","severity":1,"message":"126","line":2,"column":22,"nodeType":"119","messageId":"120","endLine":2,"endColumn":33},{"ruleId":"109","severity":1,"message":"127","line":35,"column":8,"nodeType":"111","endLine":35,"endColumn":10,"suggestions":"128"},{"ruleId":"109","severity":1,"message":"110","line":39,"column":8,"nodeType":"111","endLine":39,"endColumn":42,"suggestions":"129"},{"ruleId":"109","severity":1,"message":"110","line":46,"column":8,"nodeType":"111","endLine":46,"endColumn":54,"suggestions":"130"},{"ruleId":"109","severity":1,"message":"110","line":48,"column":95,"nodeType":"111","endLine":48,"endColumn":134,"suggestions":"131"},{"ruleId":"109","severity":1,"message":"110","line":49,"column":101,"nodeType":"111","endLine":49,"endColumn":140,"suggestions":"132"},{"ruleId":"109","severity":1,"message":"110","line":50,"column":107,"nodeType":"111","endLine":50,"endColumn":146,"suggestions":"133"},{"ruleId":"109","severity":1,"message":"134","line":37,"column":8,"nodeType":"111","endLine":37,"endColumn":10,"suggestions":"135"},{"ruleId":"109","severity":1,"message":"136","line":43,"column":8,"nodeType":"111","endLine":43,"endColumn":10,"suggestions":"137"},{"ruleId":"109","severity":1,"message":"136","line":48,"column":8,"nodeType":"111","endLine":48,"endColumn":10,"suggestions":"138"},{"ruleId":"109","severity":1,"message":"136","line":53,"column":8,"nodeType":"111","endLine":53,"endColumn":10,"suggestions":"139"},{"ruleId":"109","severity":1,"message":"136","line":58,"column":8,"nodeType":"111","endLine":58,"endColumn":10,"suggestions":"140"},{"ruleId":"109","severity":1,"message":"136","line":63,"column":8,"nodeType":"111","endLine":63,"endColumn":10,"suggestions":"141"},{"ruleId":"109","severity":1,"message":"136","line":68,"column":8,"nodeType":"111","endLine":68,"endColumn":10,"suggestions":"142"},{"ruleId":"109","severity":1,"message":"136","line":73,"column":8,"nodeType":"111","endLine":73,"endColumn":10,"suggestions":"143"},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["146"],["147"],["148"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["149"],"@typescript-eslint/no-unused-vars","'setAppErrorAC' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["150"],["151"],["152"],["153"],["154"],["155"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["156"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["157"],["158"],["159"],["160"],["161"],["162"],["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"164","fix":"166"},{"desc":"164","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"164","fix":"172"},{"desc":"164","fix":"173"},{"desc":"164","fix":"174"},{"desc":"164","fix":"175"},{"desc":"164","fix":"176"},{"desc":"177","fix":"178"},{"desc":"168","fix":"179"},{"desc":"168","fix":"180"},{"desc":"168","fix":"181"},{"desc":"168","fix":"182"},{"desc":"168","fix":"183"},{"desc":"168","fix":"184"},{"desc":"168","fix":"185"},"Update the dependencies array to be: [props]",{"range":"186","text":"187"},{"range":"188","text":"187"},{"range":"189","text":"187"},"Update the dependencies array to be: [dispatch]",{"range":"190","text":"191"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"192","text":"193"},{"range":"194","text":"187"},{"range":"195","text":"187"},{"range":"196","text":"187"},{"range":"197","text":"187"},{"range":"198","text":"187"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"199","text":"200"},{"range":"201","text":"191"},{"range":"202","text":"191"},{"range":"203","text":"191"},{"range":"204","text":"191"},{"range":"205","text":"191"},{"range":"206","text":"191"},{"range":"207","text":"191"},[765,798],"[props]",[1071,1104],[1261,1294],[1289,1291],"[dispatch]",[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],[1846,1892],[1991,2030],[2133,2172],[2281,2320],[1330,1332],"[demo, dispatch, isLoggedIn]",[1503,1505],[1674,1676],[1879,1881],[2092,2094],[2293,2295],[2440,2442],[2619,2621]]